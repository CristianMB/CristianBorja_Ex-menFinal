{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/srv/conda/lib/python3.6/site-packages/matplotlib/axes/_axes.py:6521: MatplotlibDeprecationWarning: \n",
      "The 'normed' kwarg was deprecated in Matplotlib 2.1 and will be removed in 3.1. Use 'density' instead.\n",
      "  alternative=\"'density'\", removal=\"3.1\")\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#Importando datos\n",
    "MCMC_1 = np.loadtxt('sample_0.dat')\n",
    "MCMC_2 = np.loadtxt('sample_1.dat')\n",
    "MCMC_3 = np.loadtxt('sample_2.dat')\n",
    "MCMC_4 = np.loadtxt('sample_3.dat')\n",
    "MCMC_5 = np.loadtxt('sample_4.dat')\n",
    "MCMC_6 = np.loadtxt('sample_5.dat')\n",
    "MCMC_7 = np.loadtxt('sample_6.dat')\n",
    "MCMC_8 = np.loadtxt('sample_7.dat')\n",
    "\n",
    "MCMCs = [MCMC_1, MCMC_2, MCMC_3, MCMC_4, MCMC_5, MCMC_6, MCMC_7, MCMC_8]  \n",
    "\n",
    "mu = 0.0\n",
    "sigma = 1.0\n",
    "x = np.arange(-5, 5, 0.1)\n",
    "\n",
    "plt.figure()\n",
    "plt.title('Sampling')\n",
    "plt.plot(x, np.exp(-(x-mu)**2/(2*sigma**2))/(sigma*np.sqrt(2*np.pi)), linewidth=2, color='darkgreen')\n",
    "for i in MCMCs:\n",
    "    plt.hist(i, bins=100, normed=True, color='blue')\n",
    "plt.savefig(\"MCMC_Sampling.pdf\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
